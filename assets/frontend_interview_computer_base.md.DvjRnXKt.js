import{_ as a,c as i,o as t,ai as e}from"./chunks/framework.CidjA1rH.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/interview/computer_base.md","filePath":"frontend/interview/computer_base.md","lastUpdated":1756656444000}'),n={name:"frontend/interview/computer_base.md"};function h(l,s,p,k,r,o){return t(),i("div",null,[...s[0]||(s[0]=[e(`<h2 id="_1-原码、反码、补码" tabindex="-1">1. 原码、反码、补码 <a class="header-anchor" href="#_1-原码、反码、补码" aria-label="Permalink to &quot;1. 原码、反码、补码&quot;">​</a></h2><h3 id="机器数和真值" tabindex="-1">机器数和真值 <a class="header-anchor" href="#机器数和真值" aria-label="Permalink to &quot;机器数和真值&quot;">​</a></h3><p>在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念.</p><h4 id="机器数" tabindex="-1">机器数 <a class="header-anchor" href="#机器数" aria-label="Permalink to &quot;机器数&quot;">​</a></h4><p>一个数在计算机中的二进制表示形式,  叫做这个数的机器数。</p><blockquote><p>机器数是带符号的，在计算机用<strong>一个数的最高位存放符号, 正数为0, 负数为1</strong>.</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00000011</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000011</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  =&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 00000011 / 10000011 就是机器数。</span></span></code></pre></div><h4 id="_2、真值" tabindex="-1">2、真值 <a class="header-anchor" href="#_2、真值" aria-label="Permalink to &quot;2、真值&quot;">​</a></h4><blockquote><p>将带符号位的机器数对应的真正数值称为机器数的真值。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// +1 / -1  就是真值</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0001的真值 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 0001的真值 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> –</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> –</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><h3 id="原码、反码、补码的计算" tabindex="-1">原码、反码、补码的计算 <a class="header-anchor" href="#原码、反码、补码的计算" aria-label="Permalink to &quot;原码、反码、补码的计算&quot;">​</a></h3><h4 id="原码" tabindex="-1">原码 <a class="header-anchor" href="#原码" aria-label="Permalink to &quot;原码&quot;">​</a></h4><p>原码是计算机中对数字的二进制的定点表示方法，最高位表示符号位，其余位表示数值位。优点是易于分辨，缺点是不能够直接参与运算。</p><blockquote><p>[+1]原 = 0000 0001</p><p>[-1]原  = 1000 0001</p></blockquote><p>第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:</p><blockquote><p>[1111 1111 , 0111 1111] = [-127 , 127]</p></blockquote><p>原码是人脑最容易理解和计算的表示方式.</p><h4 id="反码" tabindex="-1">反码 <a class="header-anchor" href="#反码" aria-label="Permalink to &quot;反码&quot;">​</a></h4><p>反码的表示方法是:</p><p>正数的反码是其本身</p><p><strong>负数的反码是<code>在其原码的基础上, 符号位不变，其余各个位取反.</code></strong></p><blockquote><p>[+1] = [00000001]原 = [00000001]反 [-1] = [10000001]原 = [11111110]反 = -(2+4+8+16+32+64) = -126</p></blockquote><h4 id="补码" tabindex="-1">补码 <a class="header-anchor" href="#补码" aria-label="Permalink to &quot;补码&quot;">​</a></h4><p>补码的表示方法是:</p><p>正数的补码就是其本身</p><p><strong>负数的补码是在其<code>原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</code></strong></p><blockquote><p>[+1] = [00000001]原 = [00000001]反 = [00000001]补 [-1] = [10000001]原 = [11111110]反 = [11111111]补 = -127</p></blockquote>`,27)])])}const g=a(n,[["render",h]]);export{c as __pageData,g as default};
