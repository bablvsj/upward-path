import{_ as a,c as e,o as s,a5 as n}from"./chunks/framework.DeUrfr0G.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/design.md","filePath":"interview/design.md","lastUpdated":1723562607000}'),t={name:"interview/design.md"},i=n(`<h3 id="_140-单例模式模式是什么" tabindex="-1">140. 单例模式模式是什么？ <a class="header-anchor" href="#_140-单例模式模式是什么" aria-label="Permalink to &quot;140. 单例模式模式是什么？&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>单例模式保证了全局只有一个实例来被访问。比如说常用的如弹框组件的实现和全局状态的实现。</span></span></code></pre></div><h3 id="_141-策略模式是什么" tabindex="-1">141. 策略模式是什么？ <a class="header-anchor" href="#_141-策略模式是什么" aria-label="Permalink to &quot;141. 策略模式是什么？&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>策略模式主要是用来将方法的实现和方法的调用分离开，外部通过不同的参数可以调用不同的策略。我主要在 MVP 模式解耦的时候</span></span>
<span class="line"><span>用来将视图层的方法定义和方法调用分离。</span></span></code></pre></div><h3 id="_142-代理模式是什么" tabindex="-1">142. 代理模式是什么？ <a class="header-anchor" href="#_142-代理模式是什么" aria-label="Permalink to &quot;142. 代理模式是什么？&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> 代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。比如说常见的事件代理。</span></span></code></pre></div><h3 id="_143-中介者模式是什么" tabindex="-1">143. 中介者模式是什么？ <a class="header-anchor" href="#_143-中介者模式是什么" aria-label="Permalink to &quot;143. 中介者模式是什么？&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>中介者模式指的是，多个对象通过一个中介者进行交流，而不是直接进行交流，这样能够将通信的各个对象解耦。</span></span></code></pre></div><h3 id="_144-适配器模式是什么" tabindex="-1">144. 适配器模式是什么？ <a class="header-anchor" href="#_144-适配器模式是什么" aria-label="Permalink to &quot;144. 适配器模式是什么？&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。假如我们需要一种</span></span>
<span class="line"><span>新的接口返回方式，但是老的接口由于在太多地方已经使用了，不能随意更改，这个时候就可以使用适配器模式。比如我们需要一种</span></span>
<span class="line"><span>自定义的时间返回格式，但是我们又不能对 js 时间格式化的接口进行修改，这个时候就可以使用适配器模式。</span></span></code></pre></div><p>更多关于设计模式的资料可以参考： <a href="https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc74186fb9a049ab0d0b6b" target="_blank" rel="noreferrer">《前端面试之道》</a><a href="https://juejin.im/post/59df4f74f265da430f311909#heading-3" target="_blank" rel="noreferrer">《JavaScript 设计模式》</a><a href="https://juejin.im/post/5afe6430518825428630bc4d" target="_blank" rel="noreferrer">《JavaScript 中常见设计模式整理》</a></p><h3 id="_145-观察者模式和发布订阅模式有什么不同" tabindex="-1">145. 观察者模式和发布订阅模式有什么不同？ <a class="header-anchor" href="#_145-观察者模式和发布订阅模式有什么不同" aria-label="Permalink to &quot;145. 观察者模式和发布订阅模式有什么不同？&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>发布订阅模式其实属于广义上的观察者模式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>在观察者模式中，观察者需要直接订阅目标事件。在目标发出内容改变的事件后，直接接收事件并作出响应。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>而在发布订阅模式中，发布者和订阅者之间多了一个调度中心。调度中心一方面从发布者接收事件，另一方面向订阅者发布事件，订阅者需要在调度中心中订阅事件。通过调度中心实现了发布者和订阅者关系的解耦。使用发布订阅者模式更利于我们代码的可维护性。</span></span></code></pre></div><p>详细资料可以参考： <a href="https://www.zhihu.com/question/23486749" target="_blank" rel="noreferrer">《观察者模式和发布订阅模式有什么不同？》</a></p>`,14),p=[i];function l(o,r,c,d,h,b){return s(),e("div",null,p)}const _=a(t,[["render",l]]);export{g as __pageData,_ as default};
