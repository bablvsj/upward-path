import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BkDMlYxv.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/css.md","filePath":"interview/css.md","lastUpdated":1719396101000}'),l={name:"interview/css.md"},t=n(`<h2 id="_1-标准盒子模型和ie模型" tabindex="-1">1. 标准盒子模型和IE模型 <a class="header-anchor" href="#_1-标准盒子模型和ie模型" aria-label="Permalink to &quot;1. 标准盒子模型和IE模型&quot;">​</a></h2><p>标准盒子模型： content = content ie盒子模型： content = content + padding + boder</p><p>设置盒子模型 （定义了引擎应该如何计算一个元素的总宽度和总高度）：</p><p>box-sizing 属性语法：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">content-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">border-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|inherit:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">content-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 默认值，元素的 width/height 不包含padding，border，与标准盒子模型表现一致</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">border-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 元素的 width/height 包含 padding，border，与ie盒子模型表现一致</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- inherit 指定 </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">box-sizing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 属性的值，应该从父元素继承</span></span></code></pre></div><h2 id="_2-重排-reflow-和重绘-repaint-的理解" tabindex="-1">2.重排（reflow）和重绘（repaint）的理解 <a class="header-anchor" href="#_2-重排-reflow-和重绘-repaint-的理解" aria-label="Permalink to &quot;2.重排（reflow）和重绘（repaint）的理解&quot;">​</a></h2><p>简单地总结下两者的概念：</p><ul><li>重排：无论通过什么方式影响了元素的<strong>几何信息</strong>(元素在视口内的位置和尺寸大小)，浏览器需要<strong>重新计算</strong>元素在视口内的几何属性，这个过程叫做重排。</li><li>重绘：通过构造渲染树和重排（回流）阶段，我们知道了哪些节点是可见的，以及可见节点的样式和具体的几何信息(元素在视口内的位置和尺寸大小)，接下来就可以将渲染树的每个节点都转换为屏幕上的<strong>实际像素</strong>，这个阶段就叫做重绘。</li></ul><p>推荐看看<strong>腾讯 IVWEB 团队</strong>的这篇文章：<a href="https://juejin.cn/post/6844903779700047885" title="https://juejin.cn/post/6844903779700047885" target="_blank" rel="noreferrer">你真的了解回流和重绘吗</a></p><h2 id="_3-bfc" tabindex="-1">3. BFC <a class="header-anchor" href="#_3-bfc" aria-label="Permalink to &quot;3. BFC&quot;">​</a></h2><p><code>BFC</code>（Block Formatting Contexts），<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_display/Block_formatting_context" target="_blank" rel="noreferrer">块级格式化上下文</a>，是 <code>CSS</code> 中一个比较晦涩难懂的概念，下面我们尝试以通俗易懂的语言彻底地理解它。</p><p><a href="https://juejin.cn/post/6960866014384881671" target="_blank" rel="noreferrer">可能是最好的BFC解析了...</a></p><h4 id="包含内部浮动" tabindex="-1">包含内部浮动 <a class="header-anchor" href="#包含内部浮动" aria-label="Permalink to &quot;包含内部浮动&quot;">​</a></h4><p>float 时内容移除，可以清除浮动</p><h4 id="排除外部浮动" tabindex="-1">排除外部浮动 <a class="header-anchor" href="#排除外部浮动" aria-label="Permalink to &quot;排除外部浮动&quot;">​</a></h4><p>浮动盒的区域不会和 <code>BFC</code>内容块 重叠</p><h4 id="防止外边距重叠" tabindex="-1">防止外边距重叠 <a class="header-anchor" href="#防止外边距重叠" aria-label="Permalink to &quot;防止外边距重叠&quot;">​</a></h4><p>同一个 <code>BFC</code> 下的相邻块级元素可能发生外边距折叠，创建新的 <code>BFC</code> 可以避免的外边距折叠</p><h2 id="_4-sass、less、stylus、postcss" tabindex="-1">4. Sass、Less、Stylus、PostCss <a class="header-anchor" href="#_4-sass、less、stylus、postcss" aria-label="Permalink to &quot;4. Sass、Less、Stylus、PostCss&quot;">​</a></h2><p>Stylus、Sass和Less都是CSS预处理器，它们的主要目的是简化和改进CSS的编写。它们都提供了一些基本的功能，如变量、嵌套、混合、函数等，这些功能使得CSS的编写更加简洁和高效。</p><h3 id="sass-less" tabindex="-1">Sass / Less <a class="header-anchor" href="#sass-less" aria-label="Permalink to &quot;Sass / Less&quot;">​</a></h3><p>Sass和Less是两种最流行的CSS预处理器。 它们的主要区别在于语法。Sass使用的是缩进式语法，而Less使用的是类似于CSS的语法。</p><h4 id="赋值" tabindex="-1">赋值 <a class="header-anchor" href="#赋值" aria-label="Permalink to &quot;赋值&quot;">​</a></h4><p>在Less文件中，定义变量用<code>@</code>。 在Sass文件中，定义变量用<code>$</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@number:123px; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:123px;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 普通变量声明：直接用 $ 声明 变量执行顺序是自上而下，当下面对变量重新赋值时，会用下面的新值 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:200px; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:100px; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 默认变量：在后面添加 !default 变量在执行的时候，不会根据位置执行，执行的是默认变量的值 */</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:230px; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:300px </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 全局变量和局部变量 在局部变量后添加 !global ，局部变量作用域为全局变量 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:red; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#div1{ </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $color; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//使用全局变量，结果 red </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// $color:orange; //局部变量，结果是 orange </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	$color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:orange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//添加 !global 后，局部变量 变成全局变量，div2的值为 orange </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.box{ </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		background</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $color; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在本作用域下颜色是 orange</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	 } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#div2{ background</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: $color; }</span></span></code></pre></div><p>Stylus则是另一种CSS预处理器，它的语法更加简洁和灵活，但是在使用上没有Sass和Less那么广泛。</p><p>PostCSS是一个用于转换CSS的工具。它可以帮助我们在编写CSS时使用一些新的特性，如自定义属性、嵌套等，然后在构建过程中将这些特性转换为浏览器可以理解的CSS。这样，我们就可以在编写CSS时使用一些新的特性，而不用担心浏览器的兼容性问题。</p><h4 id="插值" tabindex="-1">插值 <a class="header-anchor" href="#插值" aria-label="Permalink to &quot;插值&quot;">​</a></h4><p>在Less文件中定义一个值，插入进去用<code>@{}</code>，将定义的值放入括号中</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:margin;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:2;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:123px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">box@{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}:@{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}:auto;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">box2{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_5-css变量" tabindex="-1">5. CSS变量 <a class="header-anchor" href="#_5-css变量" aria-label="Permalink to &quot;5. CSS变量&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#369</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(--1); }</span></span></code></pre></div>`,32),h=[t];function e(p,k,r,d,E,o){return a(),i("div",null,h)}const y=s(l,[["render",e]]);export{g as __pageData,y as default};
