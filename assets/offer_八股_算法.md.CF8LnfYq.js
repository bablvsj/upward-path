import{_ as i,c as a,o as n,ai as t}from"./chunks/framework.CidjA1rH.js";const o=JSON.parse('{"title":"算法合集","description":"","frontmatter":{},"headers":[],"relativePath":"offer/八股/算法.md","filePath":"offer/八股/算法.md","lastUpdated":1756656444000}'),e={name:"offer/八股/算法.md"};function l(p,s,h,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="算法合集" tabindex="-1">算法合集 <a class="header-anchor" href="#算法合集" aria-label="Permalink to &quot;算法合集&quot;">​</a></h1><h3 id="_1-三数之和" tabindex="-1">1. 三数之和 <a class="header-anchor" href="#_1-三数之和" aria-label="Permalink to &quot;1. 三数之和&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j、i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k 且 j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k ，同时还满足 nums[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[j] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nums[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 。请</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">你返回所有和为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 且不重复的三元组。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">注意：答案中不可以包含重复的三元组。</span></span></code></pre></div><p>示例 1：</p><p>输入：nums = [-1,0,1,2,-1,-4] 输出：[[-1,-1,2],[-1,0,1]] 解释： nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。 nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。 nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。 注意，输出的顺序和三元组的顺序并不重要。 示例 2：</p><p>输入：nums = [0,1,1] 输出：[] 解释：唯一可能的三元组和不为 0 。 示例 3：</p><p>输入：nums = [0,0,0] 输出：[[0,0,0]] 解释：唯一可能的三元组和为 0 。</p><p>提示： 3 &lt;= nums.length &lt;= 3000 -105 &lt;= nums[i] &lt;= 105</p>`,8)])])}const u=i(e,[["render",l]]);export{o as __pageData,u as default};
