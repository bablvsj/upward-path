import{_ as s,c as i,o as a,a5 as t}from"./chunks/framework.6Vkfk6hO.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"front_tech/harmony/code.md","filePath":"front_tech/harmony/code.md","lastUpdated":1721901711000}'),n={name:"front_tech/harmony/code.md"},l=t(`<h3 id="_1-项目入门-hello-world" tabindex="-1">1. 项目入门 Hello World <a class="header-anchor" href="#_1-项目入门-hello-world" aria-label="Permalink to &quot;1. 项目入门 Hello World&quot;">​</a></h3><h4 id="arkts工程目录结构-stage模型" tabindex="-1">ArkTS工程目录结构（Stage模型） <a class="header-anchor" href="#arkts工程目录结构-stage模型" aria-label="Permalink to &quot;ArkTS工程目录结构（Stage模型）&quot;">​</a></h4><p>相关资源配置可访问 <a href="https://developer.huawei.com/consumer/cn/doc/harmonyos-guides-V5/start-overview-V5" target="_blank" rel="noreferrer">快速入门</a></p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// harmony项目</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.hvigor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.idea</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─AppScope </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  ├─app</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.json5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //应用的全局配置信息，如Bundle名称、名称、图标、版本号等。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─entry        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// HarmonyOS工程模块，编译构建生成一个HAP包。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  ├─src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  ├─</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">main</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  |  ├─ ets   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用于存放ArkTS源码。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  |  |  ├─ entryability        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应用/服务的入口。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  |  |  ├─ entrybackupability  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应用提供扩展的备份恢复能力。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  |  |  └ pages    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 应用/服务包含的页面。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  |  ├─ resources  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用于存放应用/服务所用到的资源文件，如图形、多媒体、字符串、布局文件|等。关于资源文件，详见[资源分类与访问]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  |  ├─ module</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.json5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 模块配置文件。主要包含HAP包的配置信息、应用/服务在具体设备上的配置信息以及应用/服务的全局配置信息。具体的配置文件说明，详见[module.json5配置文件]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  |  └test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  ├─ ohosTest</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  ├─ mock</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  ├─ </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build-profile</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.json5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //当前的模块信息、编译信息配置项，包括buildOption、targets配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  ├─ hvigorfile</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.ts</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 模块级编译构建任务脚本。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  ├─ </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">obfuscation-rules</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 混淆规则文件。混淆开启后，在使用Release模式进行编译时，会对代码进行编译、混淆及压缩处理，保护代码资产。详见[开启代码混淆]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  ├─ </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">oh-package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.json5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 用来描述包名、版本、入口文件（类型声明文件）和依赖项等信息。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  |  └test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─oh_modules  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用于存放三方库依赖信息。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build-profile</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.json5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 工程级配置信息，包括签名signingConfigs、产品配置products等。其中products中可配置当前运行环境，默认为HarmonyOS。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─hvigorfile</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.ts</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 工程级编译构建任务脚本。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├─</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">oh-package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.json5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 主要用来描述全局配置，如：依赖覆盖（overrides）、依赖关系重写（overrideDependencyMap）和参数化配置（parameterFile）等。</span></span></code></pre></div><h3 id="_2-编辑器" tabindex="-1">2. 编辑器 <a class="header-anchor" href="#_2-编辑器" aria-label="Permalink to &quot;2. 编辑器&quot;">​</a></h3><h4 id="快捷操作" tabindex="-1">快捷操作 <a class="header-anchor" href="#快捷操作" aria-label="Permalink to &quot;快捷操作&quot;">​</a></h4><p><a href="https://developer.huawei.com/consumer/cn/training/course/slightMooc/C101717494752698457" target="_blank" rel="noreferrer">编辑器快捷操作相关</a></p><table tabindex="0"><thead><tr><th>快捷键用途</th><th>快捷键</th></tr></thead><tbody><tr><td>全局查找</td><td>双击shift<br></td></tr><tr><td>代码格式化</td><td><strong>Ctrl + Alt + L</strong>（macOS为<strong>Option+Shift+Command +L</strong>）</td></tr><tr><td>快速查找API</td><td>悬浮在一个API上，点击弹窗右下角 Show in API Reference</td></tr><tr><td>代码抽取</td><td>选中代码，右键Refactor 选择Extract Method</td></tr><tr><td>代码快速注释</td><td>选中代码，点击快捷键<strong>Ctrl+/</strong></td></tr><tr><td>打开代码结构树</td><td>使用快捷键<strong>Alt + 7 / Ctrl + F12</strong>（macOS为<strong>Command+7</strong>）打开代码结构树</td></tr><tr><td>代码引用查找</td><td>单击鼠标<strong>右键 &gt; Find Usages</strong>或使用快捷键<strong>Alt +F7</strong>（macOS为<strong>Option +</strong> <strong>F7</strong>）</td></tr><tr><td>函数注释生成</td><td>在函数定义的代码块前，输入**“/<strong>”+回车键</strong>，快速生成注释信息</td></tr><tr><td>快速清除未使用<br>的import</td><td>选择文件或目录，使用快捷键<strong>Ctrl+Alt+O</strong>（macOS为<strong>Control+Option+O</strong>），<br>或单击菜单栏<strong>Code &gt; Optimize Imports</strong>。</td></tr></tbody></table>`,8),e=[l];function h(p,r,k,d,o,g){return a(),i("div",null,e)}const y=s(n,[["render",h]]);export{c as __pageData,y as default};
