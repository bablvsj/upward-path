import{_ as o,c as i,o as t,ag as l}from"./chunks/framework.D9dZiS73.js";const p=JSON.parse('{"title":"🔥 21天前端面试全能冲刺计划 (含 Vue/Next.js/Uniapp)","description":"","frontmatter":{},"headers":[],"relativePath":"planA/复习计划.md","filePath":"planA/复习计划.md","lastUpdated":1756609030000}'),a={name:"planA/复习计划.md"};function r(d,e,c,n,s,u){return t(),i("div",null,[...e[0]||(e[0]=[l('<h1 id="🔥-21天前端面试全能冲刺计划-含-vue-next-js-uniapp" tabindex="-1">🔥 21天前端面试全能冲刺计划 (含 Vue/Next.js/Uniapp) <a class="header-anchor" href="#🔥-21天前端面试全能冲刺计划-含-vue-next-js-uniapp" aria-label="Permalink to &quot;🔥 21天前端面试全能冲刺计划 (含 Vue/Next.js/Uniapp)&quot;">​</a></h1><p><strong>目标：</strong> 全面覆盖现代前端技术栈，精通核心框架，具备扎实的工程能力和面试竞争力。</p><p><strong>原则：</strong></p><ul><li><strong>模块化学习：</strong> 基础 -&gt; 核心框架 -&gt; 工程化 -&gt; 实战。</li><li><strong>深度 + 广度：</strong> 关键技术点深入，热门框架全覆盖。</li><li><strong>代码为王：</strong> 大量手写代码和项目实践。</li><li><strong>模拟驱动：</strong> 定期模拟面试，查漏补缺。</li></ul><hr><h2 id="📅-第1-4天-javascript-核心基石-day-1-4" tabindex="-1">📅 第1-4天：JavaScript 核心基石 (Day 1-4) <a class="header-anchor" href="#📅-第1-4天-javascript-核心基石-day-1-4" aria-label="Permalink to &quot;📅 第1-4天：JavaScript 核心基石 (Day 1-4)&quot;">​</a></h2><p><em>(在原有基础上微调，确保基础绝对扎实)</em></p><ul><li><strong>Day 1:</strong> 数据类型、类型判断、执行上下文、作用域链、闭包、<code>this</code> 绑定。</li><li><strong>Day 2:</strong> <code>prototype</code>/<code>__proto__</code>/<code>[[Prototype]]</code>、<code>new</code> 操作符、原型链、继承方式（含 ES6 <code>class</code>）。</li><li><strong>Day 3:</strong> <code>Promise</code> (A+ 规范核心)、<code>async/await</code>、Event Loop (浏览器 &amp; Node)。</li><li><strong>Day 4:</strong> 手写实现 - <code>call/apply/bind</code>、<code>new</code>、<code>instanceof</code>、深拷贝、防抖/节流、Promise 相关 (all, race, allSettled)。</li></ul><hr><h2 id="📅-第5-6天-html-css-浏览器-day-5-6" tabindex="-1">📅 第5-6天：HTML &amp; CSS &amp; 浏览器 (Day 5-6) <a class="header-anchor" href="#📅-第5-6天-html-css-浏览器-day-5-6" aria-label="Permalink to &quot;📅 第5-6天：HTML &amp; CSS &amp; 浏览器 (Day 5-6)&quot;">​</a></h2><ul><li><strong>Day 5: HTML &amp; CSS 布局</strong><ul><li>HTML5 语义化、<code>&lt;script&gt;</code> 加载。</li><li>CSS 盒模型、BFC、<code>position</code>、<code>display</code>、<code>float</code>。</li><li>Flexbox、Grid 布局实战。</li><li>手写：多种居中方式、三栏布局。</li></ul></li><li><strong>Day 6: 浏览器工作原理</strong><ul><li>从输入 URL 到页面渲染全过程（DNS, TCP, HTTP, 构建 DOM/CSSOM/Render Tree, Layout, Paint, Composite）。</li><li>重排(Reflow) vs 重绘(Repaint) 及优化。</li><li>内存泄漏场景与排查。</li><li>HTTP/HTTPS、状态码、缓存机制、跨域(CORS)、安全(XSS/CSRF)。</li></ul></li></ul><hr><h2 id="📅-第7-9天-vue2-核心-day-7-9" tabindex="-1">📅 第7-9天：Vue2 核心 (Day 7-9) <a class="header-anchor" href="#📅-第7-9天-vue2-核心-day-7-9" aria-label="Permalink to &quot;📅 第7-9天：Vue2 核心 (Day 7-9)&quot;">​</a></h2><ul><li><strong>Day 7: Vue2 基础与响应式原理</strong><ul><li>核心概念：MVVM、选项式 API (<code>data</code>, <code>methods</code>, <code>computed</code>, <code>watch</code>)。</li><li>生命周期钩子。</li><li><strong>响应式原理深度：</strong> <code>Object.defineProperty</code> 如何劫持数据、依赖收集 (Dep)、派发更新 (Watcher)、异步更新队列 (<code>nextTick</code>)。</li><li>手写：简易 <code>Vue</code> 响应式系统 (核心 <code>Observer</code>, <code>Dep</code>, <code>Watcher</code>)。</li></ul></li><li><strong>Day 8: Vue2 组件化与高级特性</strong><ul><li>组件通信：<code>props</code>/<code>$emit</code>、<code>$attrs</code>/<code>$listeners</code>、<code>provide</code>/<code>inject</code>、<code>$parent</code>/<code>$children</code>、<code>ref</code>、Event Bus、Vuex。</li><li>动态组件、异步组件、<code>keep-alive</code> 原理。</li><li>指令 (<code>v-model</code> 原理、自定义指令)。</li><li>混入 (Mixins) 的优缺点。</li></ul></li><li><strong>Day 9: Vuex 与 Vue Router</strong><ul><li><strong>Vuex:</strong> 核心概念 (State, Getters, Mutations, Actions, Modules)、单向数据流、<code>mapState</code> 等辅助函数。</li><li><strong>Vue Router:</strong> 模式 (hash, history)、路由配置、导航守卫、路由懒加载。</li><li>手写：简易 <code>Vuex</code> Store。</li></ul></li></ul><hr><h2 id="📅-第10-13天-vue3-核心-day-10-13" tabindex="-1">📅 第10-13天：Vue3 核心 (Day 10-13) <a class="header-anchor" href="#📅-第10-13天-vue3-核心-day-10-13" aria-label="Permalink to &quot;📅 第10-13天：Vue3 核心 (Day 10-13)&quot;">​</a></h2><ul><li><strong>Day 10: Vue3 新特性与 Composition API</strong><ul><li><code>setup()</code> 函数、<code>ref</code>/<code>reactive</code>、<code>toRefs</code>。</li><li><code>computed</code>/<code>watch</code>/<code>watchEffect</code> 在 Composition API 中的使用。</li><li>生命周期钩子在 Composition API 中的对应。</li><li>优势：逻辑复用 (<code>Composition Functions</code>)、更好的 TypeScript 支持、更小的体积。</li></ul></li><li><strong>Day 11: Vue3 响应式原理 (Proxy)</strong><ul><li><strong>核心：</strong> <code>Proxy</code> vs <code>Object.defineProperty</code> 的优势 (拦截数组、对象属性增删)。</li><li>深入 <code>reactive</code>/<code>readonly</code> 的实现。</li><li><code>effect</code>、<code>track</code>、<code>trigger</code> 的核心机制。</li><li>手写：基于 <code>Proxy</code> 的简易 <code>reactive</code> 和 <code>effect</code>。</li></ul></li><li><strong>Day 12: Vue3 组件化与高级特性</strong><ul><li>组件通信 (Composition API 下的 <code>props</code>/<code>emit</code>、<code>provide</code>/<code>inject</code>)。</li><li><code>Teleport</code>、<code>Suspense</code>。</li><li><code>defineComponent</code>、<code>defineAsyncComponent</code>。</li><li>Fragments (多根节点)。</li></ul></li><li><strong>Day 13: Pinia 与 Vue Router 4</strong><ul><li><strong>Pinia:</strong> 核心概念 (Store, State, Getters, Actions)、与 Vuex 的对比 (更简洁、TypeScript 友好、模块化天然)。</li><li><strong>Vue Router 4:</strong> 与 Vue3 的集成、Composition API 支持 (<code>useRoute</code>, <code>useRouter</code>)。</li><li>实践：用 Vue3 + Composition API + Pinia 构建一个小型 Todo 应用。</li></ul></li></ul><hr><h2 id="📅-第14-15天-react-next-js-day-14-15" tabindex="-1">📅 第14-15天：React &amp; Next.js (Day 14-15) <a class="header-anchor" href="#📅-第14-15天-react-next-js-day-14-15" aria-label="Permalink to &quot;📅 第14-15天：React &amp; Next.js (Day 14-15)&quot;">​</a></h2><ul><li><strong>Day 14: React 核心 (Hooks)</strong><ul><li><code>useState</code>, <code>useEffect</code> (清理、依赖项陷阱)。</li><li><code>useContext</code>, <code>useReducer</code>。</li><li><code>useRef</code>, <code>useMemo</code>, <code>useCallback</code>。</li><li>自定义 Hook。</li><li>React 18 新特性：并发模式 (Concurrent Mode)、自动批处理 (Automatic Batching)、<code>startTransition</code>。</li></ul></li><li><strong>Day 15: Next.js 核心</strong><ul><li><strong>优势：</strong> SSR (服务端渲染)、SSG (静态生成)、ISR (增量静态再生)。</li><li>文件路由系统 (<code>pages</code>/<code>app</code> 目录)。</li><li>数据获取：<code>getServerSideProps</code>, <code>getStaticProps</code>, <code>getStaticPaths</code>。</li><li>API Routes。</li><li><code>next/image</code>, <code>next/link</code>。</li><li>与 React 的关系。</li></ul></li></ul><hr><h2 id="📅-第16天-uniapp-跨端开发-day-16" tabindex="-1">📅 第16天：Uniapp 跨端开发 (Day 16) <a class="header-anchor" href="#📅-第16天-uniapp-跨端开发-day-16" aria-label="Permalink to &quot;📅 第16天：Uniapp 跨端开发 (Day 16)&quot;">​</a></h2><ul><li><strong>核心概念：</strong> 使用 Vue.js 语法开发，编译到 H5、小程序、App (iOS/Android)。</li><li><strong>项目结构：</strong> <code>pages.json</code> (页面路由、窗口样式)、<code>manifest.json</code> (应用配置)、<code>App.vue</code>、<code>main.js</code>。</li><li><strong>条件编译：</strong> <code>#ifdef H5</code> / <code>#ifdef MP-WEIXIN</code> / <code>#ifdef APP-PLUS</code>。</li><li><strong>生命周期：</strong> Vue 生命周期 + 小程序/APP 特有生命周期。</li><li><strong>组件与 API：</strong> 使用 <code>view</code>/<code>text</code> 等跨端组件，调用 <code>uni.xxx</code> API (如 <code>uni.request</code>, <code>uni.navigateTo</code>)。</li><li><strong>与原生交互：</strong> App 端通过 <code>plus</code> 对象调用原生能力。</li><li><strong>优缺点：</strong> 开发效率高 vs 性能/体验可能不如原生。</li></ul><hr><h2 id="📅-第17-18天-工程化、构建与性能-day-17-18" tabindex="-1">📅 第17-18天：工程化、构建与性能 (Day 17-18) <a class="header-anchor" href="#📅-第17-18天-工程化、构建与性能-day-17-18" aria-label="Permalink to &quot;📅 第17-18天：工程化、构建与性能 (Day 17-18)&quot;">​</a></h2><ul><li><strong>Day 17: Webpack &amp; Vite</strong><ul><li><strong>Webpack:</strong> 核心概念 (Entry, Output, Loader, Plugin)、打包流程、优化 (SplitChunks, Tree Shaking)。</li><li><strong>Vite:</strong> 基于 ES Modules 的开发服务器、预构建、HMR 原理、与 Webpack 对比。</li><li>手写：一个简单的 Webpack Loader。</li></ul></li><li><strong>Day 18: 前端性能优化与工程实践</strong><ul><li><strong>加载性能：</strong> 资源压缩、代码分割、懒加载、预加载/预连接、CDN、HTTP/2。</li><li><strong>运行性能：</strong> 防抖/节流、虚拟列表、Web Workers、减少重排重绘。</li><li><strong>工程实践：</strong> ESLint/Prettier、Git 工作流、CI/CD、微前端 (概念与框架)。</li></ul></li></ul><hr><h2 id="📅-第19天-typescript-与新兴技术-day-19" tabindex="-1">📅 第19天：TypeScript 与新兴技术 (Day 19)** <a class="header-anchor" href="#📅-第19天-typescript-与新兴技术-day-19" aria-label="Permalink to &quot;📅 第19天：TypeScript 与新兴技术 (Day 19)**&quot;">​</a></h2><ul><li><strong>TypeScript:</strong> 基础类型、接口、泛型、高级类型 (<code>keyof</code>, <code>typeof</code>, <code>infer</code>)、装饰器 (了解)、与框架结合。</li><li><strong>PWA:</strong> 核心概念 (Service Worker, Manifest, Cache API)。</li><li><strong>Web Components:</strong> Custom Elements, Shadow DOM。</li><li><strong>状态管理新趋势：</strong> Zustand, Jotai (了解)。</li></ul><hr><h2 id="📅-第20天-算法与数据结构强化-day-20" tabindex="-1">📅 第20天：算法与数据结构强化 (Day 20) <a class="header-anchor" href="#📅-第20天-算法与数据结构强化-day-20" aria-label="Permalink to &quot;📅 第20天：算法与数据结构强化 (Day 20)&quot;">​</a></h2><ul><li><strong>重点回顾：</strong> 数组、字符串、链表、哈希表、二叉树 (遍历、DFS/BFS)。</li><li><strong>高频题型：</strong><ul><li>双指针 (快慢指针、滑动窗口)。</li><li>递归与分治。</li><li>动态规划 (简单到中等)。</li><li>手写：深拷贝 (含循环引用)、防抖/节流、Promise 相关、LRU Cache。</li></ul></li><li><strong>平台：</strong> LeetCode, 牛客网，刷 5-8 道中等难度题。</li></ul><hr><h2 id="📅-第21天-项目复盘、简历优化与终极模拟面试-day-21" tabindex="-1">📅 第21天：项目复盘、简历优化与终极模拟面试 (Day 21) <a class="header-anchor" href="#📅-第21天-项目复盘、简历优化与终极模拟面试-day-21" aria-label="Permalink to &quot;📅 第21天：项目复盘、简历优化与终极模拟面试 (Day 21)&quot;">​</a></h2><ul><li><strong>上午：项目深度复盘</strong><ul><li>选择 1-2 个最能体现你技术栈和能力的项目 (如：Vue3 + Pinia + Vite 的后台管理系统，或 Next.js 的 SSR 商城)。</li><li>用 STAR 法则准备：项目背景、你的角色、采取的技术/行动、量化结果。</li><li>准备回答：技术选型原因？遇到的最大挑战？如何解决性能问题？如何做状态管理？如何与后端协作？</li></ul></li><li><strong>下午：简历打磨与终极模拟</strong><ul><li>仔细检查简历，确保无错别字，技术栈准确，项目描述清晰、有数据支撑。</li><li><strong>进行一场完整的、高强度的模拟面试 (60-90分钟)：</strong><ol><li>自我介绍。</li><li>项目深挖 (重点问 Vue3/Next.js/Uniapp 项目)。</li><li>技术问答 (覆盖 JS、Vue、React、浏览器、网络、工程化)。</li><li>手写代码 (如：Vue 响应式、防抖、算法题)。</li><li>反问面试官。</li></ol></li><li><strong>(强烈建议)</strong> 找一位有经验的朋友或导师进行模拟。</li></ul></li></ul><hr><h2 id="📌-给你的关键建议" tabindex="-1">📌 给你的关键建议 <a class="header-anchor" href="#📌-给你的关键建议" aria-label="Permalink to &quot;📌 给你的关键建议&quot;">​</a></h2><ol><li><strong>聚焦重点：</strong> Vue3、Vue2 响应式原理、JS 核心、浏览器原理是重中之重。</li><li><strong>动手实践：</strong> “看会了”不等于“会了”。一定要亲手写代码，特别是手写题和小项目。</li><li><strong>理解原理：</strong> 面试官更看重你是否理解“为什么”，而不仅仅是“是什么”。多问自己“为什么这么设计？”</li><li><strong>善用资源：</strong><ul><li><strong>Vue：</strong> 官方文档、《Vue.js 设计与实现》(霍春阳)。</li><li><strong>React：</strong> 官方文档、React 官方博客。</li><li><strong>Next.js：</strong> 官方文档、Learn Next.js 教程。</li><li><strong>Uniapp：</strong> 官方文档、DCloud 社区。</li><li><strong>算法：</strong> LeetCode、《算法导论》(选读)。</li></ul></li><li><strong>保持节奏：</strong> 21天不短，保持每天的学习量和专注度，避免前松后紧。</li><li><strong>调整心态：</strong> 把复习当作提升自己的过程，面试是检验学习成果的机会。</li></ol>',38)])])}const h=o(a,[["render",r]]);export{p as __pageData,h as default};
